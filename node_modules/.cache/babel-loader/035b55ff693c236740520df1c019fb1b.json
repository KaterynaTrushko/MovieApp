{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport movieApi from \"../../common/apis/movieApi\";\nimport { APIKey } from \"../../common/apis/movieApiKey\";\nexport const getMovies = createAsyncThunk(\"getMovies\", async (object, _ref) => {\n  let {\n    getState,\n    rejeValuectWith\n  } = _ref;\n  console.lof(getState());\n\n  try {\n    const {\n      data\n    } = await movieApi.get(`?apiKey=${APIKey}&s=${seriesText}&type=series`);\n    return data;\n  } catch (error) {\n    rejectWithValue(error.response);\n  }\n});\nconst initialState = {\n  data: {},\n  loading: false,\n  isSuccess: false,\n  massage: \"\"\n};\nexport const movieSlice = createSlice({\n  name: \"movies\",\n  initialState,\n  reducer: {},\n  extraReducers: {\n    [getMovies.loading]: (state, action) => {\n      state.loading = true;\n    },\n    [getMovies.fulfilled]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.loading = false;\n      state.data = payload;\n      state.isSuccess = true;\n    },\n    [getMovies.rejected]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.massage = \"failed\";\n    }\n  }\n});\nexport default movieSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","movieApi","APIKey","getMovies","object","getState","rejeValuectWith","console","lof","data","get","seriesText","error","rejectWithValue","response","initialState","loading","isSuccess","massage","movieSlice","name","reducer","extraReducers","state","action","fulfilled","payload","rejected"],"sources":["/home/ktrush/Documents/PROJECT/my_movies/src/featuer/movie/movieSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport movieApi from \"../../common/apis/movieApi\";\nimport { APIKey } from \"../../common/apis/movieApiKey\";\n\nexport const getMovies = createAsyncThunk(\n  \"getMovies\",\n  async (object, { getState, rejeValuectWith }) => {\n    console.lof(getState());\n    try {\n      const { data } = await movieApi.get(\n        `?apiKey=${APIKey}&s=${seriesText}&type=series`\n      );\n      return data;\n    } catch (error) {\n      rejectWithValue(error.response);\n    }\n  }\n);\n\nconst initialState = {\n  data: {},\n  loading: false,\n  isSuccess: false,\n  massage: \"\",\n};\n\nexport const movieSlice = createSlice({\n  name: \"movies\",\n  initialState,\n  reducer: {},\n  extraReducers: {\n    [getMovies.loading]: (state, action) => {\n      state.loading = true;\n    },\n    [getMovies.fulfilled]: (state, { payload }) => {\n      state.loading = false;\n      state.data = payload;\n      state.isSuccess = true;\n    },\n    [getMovies.rejected]: (state, { payload }) => {\n      state.massage = \"failed\";\n    },\n  },\n});\n\nexport default movieSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,MAAT,QAAuB,+BAAvB;AAEA,OAAO,MAAMC,SAAS,GAAGH,gBAAgB,CACvC,WADuC,EAEvC,OAAOI,MAAP,WAAiD;EAAA,IAAlC;IAAEC,QAAF;IAAYC;EAAZ,CAAkC;EAC/CC,OAAO,CAACC,GAAR,CAAYH,QAAQ,EAApB;;EACA,IAAI;IACF,MAAM;MAAEI;IAAF,IAAW,MAAMR,QAAQ,CAACS,GAAT,CACpB,WAAUR,MAAO,MAAKS,UAAW,cADb,CAAvB;IAGA,OAAOF,IAAP;EACD,CALD,CAKE,OAAOG,KAAP,EAAc;IACdC,eAAe,CAACD,KAAK,CAACE,QAAP,CAAf;EACD;AACF,CAZsC,CAAlC;AAeP,MAAMC,YAAY,GAAG;EACnBN,IAAI,EAAE,EADa;EAEnBO,OAAO,EAAE,KAFU;EAGnBC,SAAS,EAAE,KAHQ;EAInBC,OAAO,EAAE;AAJU,CAArB;AAOA,OAAO,MAAMC,UAAU,GAAGpB,WAAW,CAAC;EACpCqB,IAAI,EAAE,QAD8B;EAEpCL,YAFoC;EAGpCM,OAAO,EAAE,EAH2B;EAIpCC,aAAa,EAAE;IACb,CAACnB,SAAS,CAACa,OAAX,GAAqB,CAACO,KAAD,EAAQC,MAAR,KAAmB;MACtCD,KAAK,CAACP,OAAN,GAAgB,IAAhB;IACD,CAHY;IAIb,CAACb,SAAS,CAACsB,SAAX,GAAuB,CAACF,KAAD,YAAwB;MAAA,IAAhB;QAAEG;MAAF,CAAgB;MAC7CH,KAAK,CAACP,OAAN,GAAgB,KAAhB;MACAO,KAAK,CAACd,IAAN,GAAaiB,OAAb;MACAH,KAAK,CAACN,SAAN,GAAkB,IAAlB;IACD,CARY;IASb,CAACd,SAAS,CAACwB,QAAX,GAAsB,CAACJ,KAAD,YAAwB;MAAA,IAAhB;QAAEG;MAAF,CAAgB;MAC5CH,KAAK,CAACL,OAAN,GAAgB,QAAhB;IACD;EAXY;AAJqB,CAAD,CAA9B;AAmBP,eAAeC,UAAU,CAACE,OAA1B"},"metadata":{},"sourceType":"module"}